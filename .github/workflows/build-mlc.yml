# CMake workflow for macOS and Linux with Clang compiler
name: Build MacOS Linux Clang++
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [clang]
        include:
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
    steps:
      - uses: actions/checkout@v4
        # NEUE ZEILE HINZUGEFÜGT:
        with:
          submodules: recursive # Diese Zeile stellt sicher, dass Git-Submodule geklont werden

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install Build-Essentials (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Bootstrap Vcpkg
        run: |
          # Stelle sicher, dass das Skript ausführbar ist, falls es nicht sowieso schon ist
          chmod +x ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/bootstrap-vcpkg.sh
        # Das working-directory ist hier kritisch. ${{ github.workspace }} ist der Pfad zum Repo-Root.
        working-directory: ${{ github.workspace }}

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}